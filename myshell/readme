## 代码设计逻辑

本代码基于C语言实现了一个命令行的简单 shell,下面是主要的功能点:

- 内部命令：支持常见的内部命令
  - cd <directory>
    - 从当前的默认目录跳转到指定的目录directory。如果没有指定参数directory ，输出当前目录。如果directory目录不存在，输出错误信息。该指令同时要修改环境变量PWD。
  - clr：清空屏幕上的显示内容。
  - dir <directory>：输出目录directory下的所有内容，包括目录和文件。
  - environ：输出所有的环境变量。
  - echo <comment>
    - 输出comment的具体内容并换行。当comment 的内容出现多个space或者tab时，应该压缩为一个space。
  - help：输出用户指南。
  - pause：停止Shell的执行，直到用户按下Enter键。
  - quit：退出。
- I/O重定向：能够处理输入输出重定向
- 后台模式：支持后台模式执行任务
- 帮助文档：输入help命令即可查看帮助文档
- 其他指令：通过调用fork与exec完成
- 批处理：支持从参数指定的文件中读取指令
  
## 用户使用手册

### 基本用法

使用命令行工具输入指令`./myshell`运行myshell程序后，你可以看到一个以"==>"为提示符的界面。这意味着程序正常运行

输入任何myshell支持的内部命令，或者其他标准shell支持的指令，则程序将在屏幕上输出结果。例如，输入“ls”命令，将获得当前工作目录下的所有文件列表

如果要退出程序，请输入`quit`命令
### 内部命令

该Shell支持一些常见的内部命令: 

- **cd <directory>** - 切换工作目录。
- **clr** - 清空屏幕内容
- **dir <directory>** - 输出目录下的所有内容，包括目录和文件
- **echo <comment>** - 将参数输出到屏幕上
- **environ** - 显示所有的环境变量
- **help** - 显示帮助文档
- **pause** - 暂停Shell程序，按Enter键继续
### 输入输出重定向

在默认情况下，程序会把标准输出（stdout）发送到屏幕上。但是，有时候我们需要把输出保存到特定文件中而不是显示在屏幕上。这就是输出重定向的作用。

在命令行中输入">"符号，再加上文件名，输出将被写入该文件。例如：

```
$ ls > list.txt
```

此命令将文件列表输出到名为“list.txt”的文件中。如果文件不存在，则会自动创建。如果文件已存在，则会覆盖其中的内容。

而在命令行中输入">>"符号，再加上文件名，输出将被附加到该文件。例如：

```
$ ls >> list.txt
```

此命令将文件列表输出到名为“list.txt”的文件中。如果文件不存在，则会自动创建。如果文件已存在，则会紧随原来内容之后添加新的内容。

类似地，当要将文件作为输入提供给程序时，请使用"<"符号。以下示例将从“input.txt”文件中读取输入并将其传递给sort命令:

```
$ sort < input.txt
```

### 后台模式

某些进程可能需要在后台运行，以便用户可以继续使用myshell。当在输入命令时在末尾添加“&”符号，命令将在后台运行，myshell可以继续执行其他指令

例如，要将一个长时间运行的任务放到后台，请使用以下命令：

```
$ long_running_task &
```

### 环境变量

环境变量是操作系统中一个非常有用的概念。我们可以将其视为一些特殊的标记或名称，它们包含了一些值或路径，这些值和路径通常与计算机上的软件和功能有关。操作系统会在需要时查找这些环境变量，并使用它们来帮助程序正确地运行。

例如HOME环境变量，它通常用于存储当前用户的主目录路径。许多程序都需要读取或写入用户主目录下的文件，因此使用HOME环境变量可以更轻松地访问这些文件。

我们可以使用`environ`指令来获取环境变量。语法如下：

```
$ environ
```

